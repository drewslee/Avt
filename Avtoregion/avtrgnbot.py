from datetime import timedelta
from django.utils import timezone
from django.contrib.auth.models import BaseUserManager
import re
import telegram
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, Location
from telegram.ext import Updater, JobQueue, MessageHandler, CommandHandler, CallbackQueryHandler, Filters
import logging
from .models import Abonent
from .models import Car
from .models import Customer
from .models import Driver
from .models import Mediator
from .models import Product
from .models import Race
from .models import Units
from .models import Shipment
from .models import Supplier
from .models import Trailer
from .models import Constants
from .models import LoadingPlace


# Telegram token for our bot
TOKEN = '756109523:AAGA26Apy_txLlQw7WJL9fg_YWWySEx6OkQ'
BOT_REQUEST_KWARGS={
    'proxy_url': 'socks5://bliwu.tgvpnproxy.me',
    # Optional, if you need authentication:
    'urllib3_proxy_kwargs': {
        'username': 'telegram',
        'password': 'telegram',
    }
}

# Bot status list
START, AUTH, PASS, READY, RACE, ACCEPTED, BAN = 'start', 'auth', 'pass', 'ready', 'race', 'race_accepted', 'ban'
STATE = (
    (START, '–ù–∞—á–∞–ª–æ'),
    (AUTH, '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'),
    (PASS, '–ó–∞–ø—Ä–æ—Å –∫–ª—é—á–∞'),
    (READY, '–ì–æ—Ç–æ–≤'),
    (RACE, '–†–µ–π—Å'),
    (ACCEPTED, '–ü—Ä–∏–Ω—è—Ç–æ'),
    (BAN, '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'),
)

main_keyboard = [['–ú–æ–∏ —Ä–µ–π—Å—ã']]
race_keyboard = [[InlineKeyboardButton('–û—Ç–∫—É–¥–∞', callback_data=r'/from'), 
                  InlineKeyboardButton('–ö—É–¥–∞', callback_data=r'/to')]]
                 
load_keyboard = [[InlineKeyboardButton('–ó–∞–≥—Ä—É–∂–µ–Ω–æ', callback_data=r'/loaded')]] 
unload_keyboard = [[InlineKeyboardButton('–í—ã–≥—Ä—É–∂–µ–Ω–æ', callback_data=r'/unloaded')]]
                  

# AvtrgnBot –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
# TO DO: –í—ã–Ω–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã

class AvtrgnBot():
    updater = Updater(TOKEN, request_kwargs=BOT_REQUEST_KWARGS)
    bot = updater.bot
    disp = updater.dispatcher
    job_queue = updater.job_queue
    me = bot.getMe()
    states = dict(STATE)
    number_mask = r'^[ABCEHKMOPTYX–ê–í–°–ï–ù–ö–ú–û–†–¢–£–•]\s*\d{3}\s*[ABCEHKMOPTYX–ê–í–°–ï–ù–ö–ú–û–†–¢–£–•]{2}\s*(\d{2})?$'
    number_sub_mask = r'^([ABCEHKMOPTYX–ê–í–°–ï–ù–ö–ú–û–†–¢–£–•])\s*(\d{3})\s*([ABCEHKMOPTYX–ê–í–°–ï–ù–ö–ú–û–†–¢–£–•]{2})\s*(\d{2})?$'
    messages = {
        'hello' : '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç-–¥–∏—Å–ø–µ—Ç—á–µ—Ä –û–û–û "–ê–≤—Ç–æ—Ä–µ–≥–∏–æ–Ω" –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–∞—Å. –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –í–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.',
        'auth' : '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–∏—à–ª–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ x123xy.',
        'pass'  : '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª–Ω–æ–º–æ—á–∏–π. –ï—Å–ª–∏ –æ–Ω –≤–∞–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É.',
        'errauth' : '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü—Ä–æ–±—É–π—Ç–µ –µ—â—ë.',
        'errpass' : '–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë.',
        'authok' : '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.',
        'tryout' : '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—á–µ—Ä–∞–Ω–æ.',
        'banned' : '–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.',
        'select' : '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É',
    }

    def __init__(self):
        pass
    
    # –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∏–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    def send(self, uid, m = 'hello', **kwargs):
            self.bot.sendMessage(uid, self.messages[m])

    # –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    def move_auth(self, abonent, msg='auth', next_state=AUTH, try_increment=1, reset_auth_car=True):
        self.send(str(abonent.telegram_id), msg)    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        abonent.state = next_state                  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
        abonent.auth_try += try_increment
        abonent.last_seen = timezone.now()
        if reset_auth_car:
            abonent.context = None          # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        abonent.save()
        
            
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞            
    def start(self, abon):
#        self.bot.sendMessage(str(abon.telegram_id), '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ x123xy (–±—É–∫–≤—ã –ª–∞—Ç–∏–Ω–Ω–∏—Ü–µ–π)', reply_markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='Auth', callback_data='/auth')]]))
#        self.move(abon, 'hello', AUTH, try_increment=0, reset_auth_car=False)
        self.send(str(abon.telegram_id))
        self.send(str(abon.telegram_id), 'auth')
        abon.state = AUTH
        abon.save()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏        --- –ü–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    def auth(self, abon, upd):
        auth_fail = True
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ –ª–∏–º–∏—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤–æ—Å–≤–æ—è—Å–∏    
        if abon.auth_try < 3 and BAN not in abon.state and abon.active:     
            print('try < 3 and not banned and active')
            number = re.sub(self.number_sub_mask, r'\1 \2 \3 \4', upd.message.text.strip().upper())
            print(number)
            if re.search(self.number_mask, number, flags=re.IGNORECASE) is not None:
                # –î–∞–ª–µ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö                 
                try:
                    print('search car by number ' + number)
                    c = Car.objects.get(number__istartswith=number)
                except Car.DoesNotExist:
                    print('car does not exist')
                    pass 
                else:
                    auth_fail = False
                    abon.context = c.number
                    abon.save()
                    self.move_auth(abon, 'pass', PASS, 0, False)
            if auth_fail:        
                self.move_auth(abon, msg='errauth')
        else:
            self.move_auth(abon, 'tryout', BAN)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏            
    def passw(self, abon, upd):
        if PASS in abon.state and abon.secret == upd.message.text.strip():
            try:
                c = Car.objects.get(number__iexact=abon.context)
            except Car.DoesNotExist:
                pass
            else:
                abon.car = c
                abon.save()
                self.move_auth(abon, 'authok', READY, 0, True)
        else:
            self.move_auth(abon, 'errpass', PASS, 1, False)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    def carcheck(self, abon, upd):
        if abon.car is None:
            abon.state = STATE[0]
            abon.auth_try = 0
            abon.last_seen = timezone.now()
            abon.save()
            self.move_auth(abon)

    def callback_halfmin(self, bot, job):
        bot.sendMessage(chat_id=job.context, text='BEEP_OK')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /start
    def start_callback(self, bot, update):
        self.bot.sendMessage(str(update.message.chat_id), '–í–∞—à–∏ —Ä–µ–π—Å—ã', reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True))        
        self.main(bot, update)
        
            
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    def ready(self, abon, upd):
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        #race_message = self.bot.sendMessage(upd.message.chat.id, text = '–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–π—Å–µ')
        #self.bot.pinChatMessage(upd.message.chat.id, race_message.id)
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–†–µ–π—Å"
        self.myrace(abon, upd)
#        race_keyboard = [[InlineKeyboardButton(text='üöö '+self.states[RACE], callback_data='/' + RACE)]]
#        reply_markup = InlineKeyboardMarkup(race_keyboard)
#        self.bot.sendMessage(upd.message.chat.id, self.messages['select'], reply_markup=reply_markup)
        
    
    def race_accepted_callback(self, bot, update):
        if update.callback_query.answer():
            update.callback_query.edit_message_text(text='–ê —Ç–µ–ø–µ—Ä—å –≤ –ø—É—Ç—å! üõ£')
        
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ä–µ–π—Å—É
    def race_callback(self, bot, update):
        if update.callback_query.answer():
            update.callback_query.edit_message_text(text='–†–ï–ô–°: ')
            race_accept_keyboard = [[InlineKeyboardButton(text='‚úÖ –ü—Ä–∏–Ω—è—Ç–æ', callback_data='/race_accepted')]]
            reply_markup = InlineKeyboardMarkup(race_accept_keyboard)
            update.callback_query.edit_message_reply_markup(reply_markup=reply_markup)
            
    def from_callback(self, bot, update):
        if update.callback_query.answer():            
            pk = update.callback_query.data.split('|')[1]
            print('pk = ' + pk)
            race = Race.objects.get(pk=pk)
            bot.sendVenue(update.callback_query.from_user.id, 51.2875544, 58.4370285, '–ú–µ—Å—Ç–æ –ø–æ–≥—Ä—É–∑–∫–∏', race.get_load_place, reply_markup=InlineKeyboardMarkup(load_keyboard))
    
    def to_callback(self, bot, update):
        if update.callback_query.answer():            
            pk = update.callback_query.data.split('|')[1]
            print('pk = ' + pk)
            race = Race.objects.get(pk=pk)
            bot.sendVenue(update.callback_query.from_user.id, 51.6089419,52.9732831, '–ú–µ—Å—Ç–æ —Ä–∞–∑–≥—Ä—É–∑–∫–∏', race.get_unload_place, reply_markup=InlineKeyboardMarkup(unload_keyboard)) 
        
    
    def myrace(self, abon, update):
        races = Race.objects.filter(car_id=abon.car.id_car).order_by('race_date').reverse()
        text = ''
        if races.count() == 0:            
            self.bot.sendMessage(str(abon.telegram_id), '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–π—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.', reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True))
        else:
            r = races[:1][0]
            print(r)
            text += u'<b>–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞:</b> ' + str(r.id_race) + u'\n' + \
                    u'<b>–î–∞—Ç–∞ —Ä–µ–π—Å–∞:</b> ' + str(r.race_date) + u'\n' + \
                    u'<b>–û—Ç–∫—É–¥–∞:</b> ' + r.get_load_place + u'\n'  + \
                    u'<b>–ö—É–¥–∞:</b> ' + r.get_unload_place + u'\n'
            for rk in race_keyboard[0]:
                rk.callback_data += '|' + str(r.id_race)
#            [0].callback_data += '|' + str(r.id_race)
#            race_keyboard[0][1].callback_data += '|' + str(r.id_race)
            self.bot.sendMessage(str(abon.telegram_id), text, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(race_keyboard))
    
    # –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–±–æ–Ω–µ–Ω—Ç–∞
    def main(self, bot, update):
        msg = update.message
        print(msg.text)
        abonents = Abonent.objects.filter(telegram_id=int(msg.chat_id))  # –í—ã–±–æ—Ä–∫–∞ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –ø–æ telegram_id. 
        if abonents.count() == 0:
            # –ê–±–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
            a = Abonent(telegram_id=int(msg.chat_id), 
                        telegram_nick=msg.chat.first_name, 
                        secret=BaseUserManager.make_random_password(self, length=8, allowed_chars='0123456789'), 
                        last_seen=timezone.now())
            a.save()
        elif abonents.count() == 1:
            # –ê–±–æ–Ω–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –¥–∞–ª–µ–µ —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º
            a = abonents[0]
        else:
            # –ê–±–æ–Ω–µ–Ω—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º telegram_id –Ω–∞–π–¥–µ–Ω–æ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ -> –Ω–µ–ø–æ—Ä—è–¥–æ–∫!
            logging.critical(u'–ë–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –∞–±–æ–Ω–µ–Ω—Ç–∞ —Å telegram_id: ' + str(msg.chat_id))
        
        if START in a.state:
            self.start(a)
        elif AUTH in a.state:
            self.auth(a, update)
        elif PASS in a.state:
            self.passw(a, update)
        elif READY in a.state:
            self.carcheck(a, update)
            self.ready(a, update)
        elif RACE in a.state:
            self.myrace(a, update)
        elif BAN in a.state:
            pass
        else:
            a.state = STATE[0]             # –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π
            a.last_seen = timezone.now()   # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∞–±–æ–Ω–µ–Ω—Ç–æ–º
            a.save()

    
    
    def __str__(self):
        return '{}:{}'.format(self.me['id'], self.me['username'])
        
    def start_bot(self):
#        a = Abonent.objects.get(telegram_id=0)  # –í—ã–±–æ—Ä–∫–∞ –∞–±–æ–Ω–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –ø–æ telegram_id 
        self.disp.add_handler(CommandHandler('start', self.start_callback))
        self.disp.add_handler(CallbackQueryHandler(self.race_callback, pattern=r'/race$'))
        self.disp.add_handler(CallbackQueryHandler(self.from_callback, pattern=r'/from'))
        self.disp.add_handler(CallbackQueryHandler(self.to_callback, pattern=r'/to'))
        self.disp.add_handler(CallbackQueryHandler(self.race_accepted_callback, pattern=r'/race_accepted$'))
        self.disp.add_handler(MessageHandler(Filters.text, self.main))
        self.updater.start_polling()
#        self.updater.idle()
        return 'ok'

        
if __name__ == '__main__':
    logging.basicConfig(filename=u'bot.log', format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
    b = AvtrgnBot()    
    b.start_bot()